swagger: "2.0"
info:
  description: "Gestion de l'authentification utilisateur"
  version: "1.0.0"
  title: "Authentification API"
host: "localhost:5000"
basePath: "/auth"
schemes:
  - "http"
tags:
  - name: "auth"
    description: "Gestion des utilisateurs et de l'authentification"

paths:
  /register:
    post:
      tags:
        - "auth"
      summary: "Enregistrer un nouvel utilisateur"
      description: "Créer un nouvel utilisateur dans l'application."
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - username
              - email
              - password
            properties:
              username:
                type: string
                description: "Nom d'utilisateur"
                default: "testuser"
              email:
                type: string
                description: "Adresse email de l'utilisateur"
                default: "test@example.com"
              password:
                type: string
                description: "Mot de passe de l'utilisateur"
                default: "password123"
      responses:
        201:
          description: "Utilisateur créé avec succès"
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
        400:
          description: "Erreur si l'email est déjà utilisé"
          schema:
            type: object
            properties:
              msg:
                type: string
                example: "Email déjà utilisé"

  /login:
    post:
      tags:
        - "auth"
      summary: "Connexion de l'utilisateur"
      description: "Permet à un utilisateur de se connecter à l'API."
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                description: "Adresse email de l'utilisateur"
                default: "test@example.com"
              password:
                type: string
                description: "Mot de passe de l'utilisateur"
                default: "password123"
      responses:
        200:
          description: "Connexion réussie avec tokens JWT"
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: "Token d'accès JWT"
              refresh_token:
                type: string
                description: "Token de rafraîchissement JWT"
        401:
          description: "Identifiants incorrects"
          schema:
            type: object
            properties:
              msg:
                type: string
                example: "Identifiants incorrects"

  /logout:
    post:
      tags:
        - "auth"
      summary: "Déconnexion de l'utilisateur"
      description: "Permet de déconnecter l'utilisateur en supprimant les tokens JWT."
      security:
        - bearerAuth: []  # Sécurisé avec JWT
      responses:
        200:
          description: "Déconnexion réussie"
          schema:
            type: object
            properties:
              msg:
                type: string
                example: "Déconnexion réussie"
        401:
          description: "Token invalide ou non fourni"
          schema:
            type: object
            properties:
              msg:
                type: string
                example: "Token invalide ou non fourni"

# Définir les modèles de réponse
definitions:
  User:
    type: object
    required:
      - username
      - email
    properties:
      username:
        type: string
        description: "Nom d'utilisateur"
      email:
        type: string
        description: "Adresse email"
      password:
        type: string
        description: "Mot de passe (crypté dans la base)"
