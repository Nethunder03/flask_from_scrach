{
  "swagger": "2.0",
  "info": {
    "title": "API de Blog avec Authentification",
    "description": "API pour gérer les utilisateurs, publications, commentaires et catégories.",
    "version": "1.0.0"
  },
  "host": "flask-from-scrach-2.onrender.com",
  "basePath": "/",
  "schemes": ["https"],
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Enregistrement d'un nouvel utilisateur",
        "description": "Cette route permet d'enregistrer un nouvel utilisateur.",
        "tags": ["Auth"],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "Données de l'utilisateur pour l'enregistrement",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRegister"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Utilisateur créé avec succès",
            "schema": {
              "$ref": "#/definitions/UserRegister"
            }
          },
          "400": {
            "description": "Email déjà utilisé ou données invalides",
            "examples": {
              "application/json": {
                "msg": "Email déjà utilisé"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la création de l'utilisateur"
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Authentifie un utilisateur et retourne les tokens JWT",
        "description": "Permet de connecter un utilisateur et de générer des tokens d'accès et de rafraîchissement.",
        "tags": ["Auth"],
        "parameters": [
          {
            "in": "body",
            "name": "login",
            "description": "Données d'authentification (email et mot de passe)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Utilisateur authentifié avec succès, retourne les tokens JWT",
            "schema": {
              "type": "object",
              "properties": {
                "access_token": {
                  "type": "string",
                  "description": "Token d'accès JWT"
                },
                "refresh_token": {
                  "type": "string",
                  "description": "Token de rafraîchissement JWT"
                }
              }
            }
          },
          "401": {
            "description": "Identifiants incorrects",
            "examples": {
              "application/json": {
                "msg": "Identifiants incorrects"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de l'authentification"
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Déconnecte l'utilisateur en supprimant le token JWT",
        "description": "Cette route permet de déconnecter un utilisateur en supprimant le token JWT.",
        "tags": ["Auth"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Déconnexion réussie",
            "examples": {
              "application/json": {
                "msg": "Déconnexion réussie"
              }
            }
          },
          "401": {
            "description": "Token invalide ou non fourni",
            "examples": {
              "application/json": {
                "msg": "Token invalide ou non fourni"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la déconnexion"
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Récupère la liste des utilisateurs",
        "description": "Cette route permet de récupérer la liste complète des utilisateurs.",
        "tags": ["Users"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des utilisateurs récupérée avec succès",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "Token invalide ou non fourni",
            "examples": {
              "application/json": {
                "msg": "Token invalide ou non fourni"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la récupération des utilisateurs"
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Récupère un utilisateur par son ID",
        "description": "Cette route permet de récupérer un utilisateur par son ID.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID de l'utilisateur",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Utilisateur récupéré avec succès",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Utilisateur non trouvé",
            "examples": {
              "application/json": {
                "msg": "Utilisateur non trouvé"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la récupération de l'utilisateur"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Met à jour un utilisateur",
        "description": "Cette route permet de mettre à jour un utilisateur en fonction de son ID.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID de l'utilisateur à mettre à jour",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "user",
            "description": "Données de l'utilisateur à mettre à jour",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Utilisateur mis à jour avec succès",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Utilisateur non trouvé",
            "examples": {
              "application/json": {
                "msg": "Utilisateur non trouvé"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la mise à jour de l'utilisateur"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Supprime un utilisateur",
        "description": "Cette route permet de supprimer un utilisateur en fonction de son ID.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID de l'utilisateur à supprimer",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "Utilisateur supprimé avec succès"
          },
          "404": {
            "description": "Utilisateur non trouvé",
            "examples": {
              "application/json": {
                "msg": "Utilisateur non trouvé"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la suppression de l'utilisateur"
              }
            }
          }
        }
      }
    },
    "/posts": {
      "get": {
        "summary": "Récupère la liste des publications",
        "description": "Cette route permet de récupérer la liste complète des publications.",
        "tags": ["Posts"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des publications récupérée avec succès",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Post"
              }
            }
          },
          "401": {
            "description": "Token invalide ou non fourni",
            "examples": {
              "application/json": {
                "msg": "Token invalide ou non fourni"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la récupération des publications"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Crée une nouvelle publication",
        "description": "Cette route permet de créer une nouvelle publication.",
        "tags": ["Posts"],
        "parameters": [
          {
            "in": "body",
            "name": "post",
            "description": "Données de la nouvelle publication",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "description": "Publication créée avec succès",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "400": {
            "description": "Données invalides",
            "examples": {
              "application/json": {
                "msg": "Données invalides"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la création de la publication"
              }
            }
          }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "summary": "Récupère une publication par son ID",
        "description": "Cette route permet de récupérer une publication en fonction de son ID.",
        "tags": ["Posts"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID de la publication",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Publication récupérée avec succès",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "404": {
            "description": "Publication non trouvée",
            "examples": {
              "application/json": {
                "msg": "Publication non trouvée"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la récupération de la publication"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Met à jour une publication",
        "description": "Cette route permet de mettre à jour une publication en fonction de son ID.",
        "tags": ["Posts"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID de la publication à mettre à jour",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "post",
            "description": "Données de la publication à mettre à jour",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Post"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Publication mise à jour avec succès",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "404": {
            "description": "Publication non trouvée",
            "examples": {
              "application/json": {
                "msg": "Publication non trouvée"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la mise à jour de la publication"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Supprime une publication",
        "description": "Cette route permet de supprimer une publication en fonction de son ID.",
        "tags": ["Posts"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID de la publication à supprimer",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "Publication supprimée avec succès"
          },
          "404": {
            "description": "Publication non trouvée",
            "examples": {
              "application/json": {
                "msg": "Publication non trouvée"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la suppression de la publication"
              }
            }
          }
        }
      }
    },
    "/comments": {
      "get": {
        "summary": "Récupère la liste des commentaires",
        "description": "Cette route permet de récupérer la liste complète des commentaires.",
        "tags": ["Comments"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des commentaires récupérée avec succès",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          "401": {
            "description": "Token invalide ou non fourni",
            "examples": {
              "application/json": {
                "msg": "Token invalide ou non fourni"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la récupération des commentaires"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Crée un nouveau commentaire",
        "description": "Cette route permet de créer un nouveau commentaire.",
        "tags": ["Comments"],
        "parameters": [
          {
            "in": "body",
            "name": "comment",
            "description": "Données du commentaire",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "description": "Commentaire créé avec succès",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "400": {
            "description": "Données invalides",
            "examples": {
              "application/json": {
                "msg": "Données invalides"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la création du commentaire"
              }
            }
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "summary": "Récupère un commentaire par son ID",
        "description": "Cette route permet de récupérer un commentaire en fonction de son ID.",
        "tags": ["Comments"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID du commentaire",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Commentaire récupéré avec succès",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "404": {
            "description": "Commentaire non trouvé",
            "examples": {
              "application/json": {
                "msg": "Commentaire non trouvé"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la récupération du commentaire"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Met à jour un commentaire",
        "description": "Cette route permet de mettre à jour un commentaire en fonction de son ID.",
        "tags": ["Comments"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID du commentaire à mettre à jour",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "comment",
            "description": "Données du commentaire à mettre à jour",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Commentaire mis à jour avec succès",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "404": {
            "description": "Commentaire non trouvé",
            "examples": {
              "application/json": {
                "msg": "Commentaire non trouvé"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la mise à jour du commentaire"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Supprime un commentaire",
        "description": "Cette route permet de supprimer un commentaire en fonction de son ID.",
        "tags": ["Comments"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID du commentaire à supprimer",
            "required": true,
            "type": "integer"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "Commentaire supprimé avec succès"
          },
          "404": {
            "description": "Commentaire non trouvé",
            "examples": {
              "application/json": {
                "msg": "Commentaire non trouvé"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la suppression du commentaire"
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "summary": "Récupère la liste des catégories",
        "description": "Cette route permet de récupérer la liste complète des catégories.",
        "tags": ["Categories"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des catégories récupérée avec succès",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          },
          "401": {
            "description": "Token invalide ou non fourni",
            "examples": {
              "application/json": {
                "msg": "Token invalide ou non fourni"
              }
            }
          },
          "500": {
            "description": "Erreur serveur interne",
            "examples": {
              "application/json": {
                "msg": "Erreur lors de la récupération des catégories"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "UserRegister": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string"
        }
      },
      "required": ["name", "email", "password"]
    },
    "UserLogin": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string"
        }
      },
      "required": ["email", "password"]
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Post": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "user_id": {
          "type": "integer"
        },
        "category_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "content": {
          "type": "string"
        },
        "user_id": {
          "type": "integer"
        },
        "post_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Utiliser le token JWT comme 'Bearer <token>' dans l'en-tête de la requête"
    }
  }
}
